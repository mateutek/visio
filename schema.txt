// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
  output     = "../generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARENT
  CHILD
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  balance      Float
  role         UserRole
  createdAt    DateTime       @default(now())
  Transactions Transactions[]
  Requests     Requests[]     @relation("Requests")
  Approved     Requests[]     @relation("ApprovedRequests")
}

model Transactions {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @default("")
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  userId     String   @db.ObjectId
  amount     Float    @default(0)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Category {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @default("")
  Transactions Transactions[]
  createdAt    DateTime       @default(now())
  Request      Requests[]
}

model Log {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  resourceName String // name of the resource that was updated
  recordId     String    @default("") @db.ObjectId
  action       LogAction @default(UPDATE)
  createdAt    DateTime  @default(now())
}

model Requests {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @db.ObjectId
  user         User          @relation("Requests", fields: [userId], references: [id])
  categoryId   String        @db.ObjectId
  category     Category      @relation(fields: [categoryId], references: [id])
  amount       Float
  status       RequestStatus @default(PENDING)
  approvedAt   DateTime?
  approvedById String?       @db.ObjectId
  approvedBy   User?         @relation("ApprovedRequests", fields: [approvedById], references: [id])
  createdAt    DateTime      @default(now())
}
